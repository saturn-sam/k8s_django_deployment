# Define the upstream for the Django application (Gunicorn in this example)
upstream django_app {
    server web:8000;  # Replace "web" with your backend service name and port
}

server {
    listen 80;

    # Define the maximum allowed size for client uploads (Django uses it)
    client_max_body_size 50M;

    # Serve static files
    location /static/ {
        alias /home/app/web/staticfiles/;  # Path where static files are collected
        access_log off;  # Optional: Disable logging for static files to reduce noise
        expires 30d;  # Cache static files for 30 days
        add_header Cache-Control "public";
    }

    # Serve media files
    location /media/ {
        alias /home/app/web/mediafiles/;  # Path to media files
        access_log off;
        expires 30d;
        add_header Cache-Control "public";
    }

    # Proxy requests to the Django backend
    location / {
        proxy_pass http://django_app;  # Proxy requests to the Django application (Gunicorn)
        
        proxy_set_header Host $host;  # Preserve the original host header
        proxy_set_header X-Real-IP $remote_addr;  # Pass the client IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Handle forwarded requests
        proxy_set_header X-Forwarded-Proto $scheme;  # Handle protocol (http or https)

        # WebSocket Support (if needed for Django Channels or similar)
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Optional: Logging paths for access and error logs (set them if needed)
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
}